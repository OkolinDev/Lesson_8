# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка. Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например,
# команду “stop”. При этом скрипт завершается, сформированный список выводится на экран. Подсказка: для данного
# задания примем, что пользователь может вводить только числа и строки. При вводе пользователем очередного элемента
# необходимо реализовать проверку типа элемента и вносить его в список, только если введено число. Класс-исключение
# должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа
# скрипта не должна завершаться.

class Error:
    def __init__(self):
        self.my_list = []

    @property
    def user_input(self):
        while True:
            try:
                numbers = int(input('вводите значения: '))
                self.my_list.append(numbers)
            except:
                print(f'Недопустимое значение - строка или булево')
                comeback = input("Попробовать еще раз?Нажмите любую клавишу для продолжения, если нет - введите stop: ")

                if comeback == 'stop':
                    print(f'Сформированный список {self.my_list}')
                    return 'Вы вышли'
                if comeback != 'stop':
                    return error.user_input

                break


error = Error()
print(error.user_input)
